package main

import "fmt"

/**
1.通道channel是用来传递数据的一种数据结构
2.通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 <-
用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。
3.声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建:
	ch := make(chan int)
4.默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。
5.通道可以设定缓冲区，通过make的第二个参数设置缓冲区的大小:
	ch := make(chan int,100)
6.带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据
可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。不过由于缓冲区
的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。
7.如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞
直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。
接收方在有值可以接收之前会一直阻塞。
*/

func main() {
	// 1.声明一个通道
	//ch := make(chan int)
	// 2.把v发送到通道ch
	//ch <- v
	// 3.从ch接收数据，并把值赋给v
	//v := <-ch

	s := []int{1, 2, 3, 10}

	c := make(chan int)

	go sum(s[:len(s)/2], c)
	go sum(s[len(s)/2:], c)
	// 从通道c中接收
	x, y := <-c, <-c

	fmt.Printf("x = %d y = %d x+y = %d\n", x, y, x+y)
}

func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	// 把sum发送到通道c
	c <- sum
}
